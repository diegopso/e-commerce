/**
     * Método do Active Record, retorna uma instância do Model buscando do banco pela chave primária
     * @param	int	$id		valor da chave primária
     * @return	object		retorna uma intância de Model
     */
    public static function get($id = null) {
        $instance = new self();

        if (!$id)
            return $instance;

        $db = Database::getInstance();
        return $db->class_name->single('id = ?', $id);
    }
    
    /**
     * Método do Active Record, retorna um array de instâncias do Model buscando do banco pelos parâmetros
     * @param	int		$p		número da página (ex.: 1 listará de 0 á 10)	
     * @param	int		$m		quantidade máxima de itens por página
     * @param	string	$o		coluna a ser ordenada
     * @param	string	$t		tipo de ordenação (asc ou desc)
     * @return	array			retorna umma lista de instâncias de Model
     */
    public static function all($p = 1, $m = 10, $o = 'Id', $t = 'asc') {
        $p = $m * (($p < 1 ? 1 : $p) - 1);
        $db = Database::getInstance();
        return $db->class_name->orderBy($o, $t)->paginate($p, $m);
    }
    
    /**
     * Método do Active Record para salvar o objeto no banco, se for uma nova intância dá um 'insert', senão dá 'update'
     * @return	void
     */
    public function save() {
        $key = $this->_getKey();
        
        $db = Database::getInstance();
        if ($key){
            $bool = $this->{$key};
            if($bool){
                $db->class_name->update($this);
            }
            else{
                $db->class_name->insert($this);
            }
        }else
            $db->class_name->insert($this);
        $db->save();
    }
    
    /**
     * Método do Active Record que deleta um objeto do banco de dados, porém o objeto não pode ser uma nova instância
     * @return	void
     */
    public function delete() {
        $db = Database::getInstance();
        $db->class_name->delete($this);
        $db->save();
    }